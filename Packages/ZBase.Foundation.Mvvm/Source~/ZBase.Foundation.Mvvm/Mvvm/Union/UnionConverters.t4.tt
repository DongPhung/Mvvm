<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    string[] unionTypes = new string[] {
        "bool",
        "byte",
        "sbyte",
        "char",
        "double",
        "float",
        "int",
        "uint",
        "long",
        "ulong",
        "short",
        "ushort",
    };

    string[] unionTypeNames = new string[] {
        "Bool",
        "Byte",
        "SByte",
        "Char",
        "Double",
        "Float",
        "Int",
        "UInt",
        "Long",
        "ULong",
        "Short",
        "UShort",
    };
#>
///*************************************************///
///                                                 ///
/// This file is auto-generated by T4 Text Template ///
///           DO NOT manually modify it!            ///
///                                                 ///
///*************************************************///

using System;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using UnityEngine;

namespace ZBase.Foundation.Mvvm.Unions.Converters
{
<#
    for (var i = 0; i < unionTypes.Length; i++) {
        var type = unionTypes[i];
        var typeName = unionTypeNames[i];
#>
    internal sealed class UnionConverter<#= typeName #> : IUnionConverter<<#= type #>>
    {
        public static readonly UnionConverter<#= typeName #> Default = new UnionConverter<#= typeName #>();

        private UnionConverter<#= typeName #>() { }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Union ToUnion(<#= type #> value) => new Union(value);
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Union<<#= type #>> ToUnionT(<#= type #> value) => new Union(value);
        
        public <#= type #> GetValue(in Union union)
        {
            if (union.TryGetValue(out <#= type #> result) == false)
            {
                ThrowIfInvalidCast();
            }

            return result;
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TryGetValue(in Union union, out <#= type #> result) => union.TryGetValue(out result);
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool TrySetValueTo(in Union union, ref <#= type #> dest) => union.TrySetValueTo(ref dest);
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(in Union union) => union.<#= typeName #>.ToString();

        [DoesNotReturn, HideInCallstack]
        private static void ThrowIfInvalidCast()
        {
            throw new InvalidCastException($"Cannot get value of {typeof(<#= type #>)} from the input union.");
        }
    }
<# } #>

}
