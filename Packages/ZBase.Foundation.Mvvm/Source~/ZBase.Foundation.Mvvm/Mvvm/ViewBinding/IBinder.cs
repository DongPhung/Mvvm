namespace ZBase.Foundation.Mvvm.ViewBinding
{
    /// <summary>
    /// Any class implements this interface will be an eligible
    /// candidate to have its details generated by the corresponding generator.
    /// </summary>
    /// <seealso cref="BindingAttribute"/>
    public interface IBinder
    {
        IBindingContext Context { get; }

        /// <summary>
        /// Sets target property name to a binding property.
        /// </summary>
        /// <param name="bindingPropertyName">The binding property whose <see cref="BindingProperty.TargetPropertyName"/> will be set.</param>
        /// <param name="targetPropertyName">
        /// The property whose container class is an <see cref="ZBase.Foundation.Mvvm.ComponentModel.IObservableObject"/>.
        /// <br/>
        /// See <see cref="ZBase.Foundation.Mvvm.ViewBinding.BindingProperty.TargetPropertyName"/>
        /// </param>
        public bool SetTargetPropertyName(string bindingPropertyName, string targetPropertyName) => false;

        /// <summary>
        /// Sets an instance of <see cref="IAdapter"/> to the converter of a binding property.
        /// </summary>
        /// <param name="bindingPropertyName">The binding property whose corresponding <see cref="Converter.Adapter"/> will be set.</param>
        /// <param name="adapter">An instance of <see cref="IAdapter"/>.</param>
        public bool SetAdapter(string bindingPropertyName, IAdapter adapter) => false;

        /// <summary>
        /// Start listening to events from the <see cref="Context"/>.
        /// </summary>
        public void StartListening() { }

        /// <summary>
        /// Stop listening to events from the <see cref="Context"/>.
        /// </summary>
        public void StopListening() { }
    }
}
